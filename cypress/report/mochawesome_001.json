{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-25T03:02:09.559Z",
    "end": "2023-09-25T03:02:11.908Z",
    "duration": 2349,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "16177d25-1838-4f2e-a44a-191b04219b96",
      "title": "",
      "fullFile": "cypress\\e2e\\spec.cy.js",
      "file": "cypress\\e2e\\spec.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "61695679-b90e-4ea3-b155-685cbba11abf",
          "title": "Testes automaticos da API ServeRest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cadastra um novo usuário",
              "fullTitle": "Testes automaticos da API ServeRest Cadastra um novo usuário",
              "timedOut": null,
              "duration": 495,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  nome: 'Nome do Usuário',\n  email: randomEmailCadastrar,\n  password: '12345',\n  administrador: 'true'\n};\ncy.request({\n  method: 'POST',\n  url: 'https://serverest.dev/usuarios',\n  body: user\n}).should(({\n  status,\n  body\n}) => {\n  expect(status).to.equal(201);\n  expect(body.message).to.include('Cadastro realizado com sucesso');\n  userId = body._id;\n});",
              "err": {},
              "uuid": "d16e7811-85c3-47b7-b845-cb2121f71721",
              "parentUUID": "61695679-b90e-4ea3-b155-685cbba11abf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cadastra usuário com e-mail igual ao primeiro",
              "fullTitle": "Testes automaticos da API ServeRest Cadastra usuário com e-mail igual ao primeiro",
              "timedOut": null,
              "duration": 205,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  nome: 'Nome do Usuário',\n  email: randomEmailCadastrar,\n  password: '12345',\n  administrador: 'true'\n};\ncy.request({\n  method: 'POST',\n  url: 'https://serverest.dev/usuarios',\n  body: user,\n  failOnStatusCode: false\n}).should(({\n  status,\n  body\n}) => {\n  expect(status).to.equal(400);\n  expect(body.message).to.include('Este email já está sendo usado');\n});",
              "err": {},
              "uuid": "9e89b837-4dda-49e8-be97-b30734406baa",
              "parentUUID": "61695679-b90e-4ea3-b155-685cbba11abf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Atualizar usuário cadastrado",
              "fullTitle": "Testes automaticos da API ServeRest Atualizar usuário cadastrado",
              "timedOut": null,
              "duration": 204,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  nome: 'Nome do Usuário',\n  email: randomEmailAtualizar,\n  //email: 'edu222@gmail.com',\n  password: '12345',\n  administrador: 'true'\n};\ncy.request({\n  method: 'PUT',\n  url: `https://serverest.dev/usuarios/${userId}`,\n  body: user\n  //failOnStatusCode: false,\n}).should(({\n  status,\n  body\n}) => {\n  expect(status).to.equal(200);\n  expect(body.message).to.include('Registro alterado com sucesso');\n  //expect(body._id).to.be.not.undefined;\n});",
              "err": {},
              "uuid": "b5b548e7-7f20-4e03-9992-150e4f8f6209",
              "parentUUID": "61695679-b90e-4ea3-b155-685cbba11abf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Buscar usuário cadastrado por ID",
              "fullTitle": "Testes automaticos da API ServeRest Buscar usuário cadastrado por ID",
              "timedOut": null,
              "duration": 212,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `https://serverest.dev/usuarios/${userId}`\n}).should(({\n  status,\n  body\n}) => {\n  expect(status).to.equal(200);\n  expect(body.nome).to.equal('Nome do Usuário');\n  //expect(body.email).to.equal(randomEmailCadastrar); \n  expect(body.password).to.equal('12345');\n});",
              "err": {},
              "uuid": "2ce463bf-67ea-4f7a-9e1d-c9185bad6e5f",
              "parentUUID": "61695679-b90e-4ea3-b155-685cbba11abf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Buscar usuário por email",
              "fullTitle": "Testes automaticos da API ServeRest Buscar usuário por email",
              "timedOut": null,
              "duration": 216,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const emailToSearch = randomEmailAtualizar;\ncy.request({\n  method: 'GET',\n  url: `https://serverest.dev/usuarios?email=${emailToSearch}`\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body).to.be.an('object');\n  expect(response.body).to.have.property('usuarios').that.is.an('array');\n  if (response.body.usuarios.length === 0) {\n    cy.log('Nenhum usuário encontrado com o email especificado.');\n  } else {\n    const firstUser = response.body.usuarios[0];\n    expect(firstUser).to.have.property('nome');\n    expect(firstUser).to.have.property('password');\n  }\n});",
              "err": {},
              "uuid": "05914c70-0b27-4aa5-8e1c-4a2f0d7d2a58",
              "parentUUID": "61695679-b90e-4ea3-b155-685cbba11abf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Buscar usuário por email inválido",
              "fullTitle": "Testes automaticos da API ServeRest Buscar usuário por email inválido",
              "timedOut": null,
              "duration": 216,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const emailInvalido = 'email_inexistente@exemplo.com';\ncy.request({\n  method: 'GET',\n  url: `https://serverest.dev/usuarios?email=${emailInvalido}`\n}).should(({\n  status,\n  body\n}) => {\n  expect(status).to.equal(200);\n  expect(body).to.be.an('object');\n  expect(body.usuarios).to.be.an('array');\n  expect(body.usuarios).to.have.lengthOf(0);\n});",
              "err": {},
              "uuid": "75e9dfd9-fc78-46d8-96f0-94128b8cd7ba",
              "parentUUID": "61695679-b90e-4ea3-b155-685cbba11abf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Buscar Administradores",
              "fullTitle": "Testes automaticos da API ServeRest Buscar Administradores",
              "timedOut": null,
              "duration": 213,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const is_administrador = true;\ncy.request({\n  method: 'GET',\n  url: `https://serverest.dev/usuarios?administrador=${is_administrador}`\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body).to.be.an('object');\n  expect(response.body).to.have.property('usuarios').that.is.an('array');\n  expect(response.body.usuarios.length).to.be.greaterThan(0);\n  if (response.body.usuarios.length === 0) {\n    cy.log('Nenhum Administrador encontrado.');\n  }\n});",
              "err": {},
              "uuid": "b218a469-be5e-46bf-bc0b-5c5c135ec489",
              "parentUUID": "61695679-b90e-4ea3-b155-685cbba11abf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deletar usuário cadastrado por ID",
              "fullTitle": "Testes automaticos da API ServeRest Deletar usuário cadastrado por ID",
              "timedOut": null,
              "duration": 217,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'DELETE',\n  url: `https://serverest.dev/usuarios/${userId}`\n}).should(({\n  status,\n  body\n}) => {\n  expect(status).to.equal(200);\n  expect(body.message).to.contains('Registro excluído com sucesso');\n});",
              "err": {},
              "uuid": "5283b1e7-9edf-4832-9993-b57f7ddf64fb",
              "parentUUID": "61695679-b90e-4ea3-b155-685cbba11abf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deletar mesmo usuário cadastrado por ID novamente",
              "fullTitle": "Testes automaticos da API ServeRest Deletar mesmo usuário cadastrado por ID novamente",
              "timedOut": null,
              "duration": 202,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'DELETE',\n  url: `https://serverest.dev/usuarios/${userId}`\n}).should(({\n  status,\n  body\n}) => {\n  expect(status).to.equal(200);\n  expect(body.message).to.contains('Nenhum registro excluído');\n});",
              "err": {},
              "uuid": "2ec7b3b0-5f99-446d-8171-8d7d92b40a64",
              "parentUUID": "61695679-b90e-4ea3-b155-685cbba11abf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d16e7811-85c3-47b7-b845-cb2121f71721",
            "9e89b837-4dda-49e8-be97-b30734406baa",
            "b5b548e7-7f20-4e03-9992-150e4f8f6209",
            "2ce463bf-67ea-4f7a-9e1d-c9185bad6e5f",
            "05914c70-0b27-4aa5-8e1c-4a2f0d7d2a58",
            "75e9dfd9-fc78-46d8-96f0-94128b8cd7ba",
            "b218a469-be5e-46bf-bc0b-5c5c135ec489",
            "5283b1e7-9edf-4832-9993-b57f7ddf64fb",
            "2ec7b3b0-5f99-446d-8171-8d7d92b40a64"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2180,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/report",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}