{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 9,
    "pending": 0,
    "failures": 1,
    "start": "2023-10-30T02:24:53.281Z",
    "end": "2023-10-30T02:24:55.844Z",
    "duration": 2563,
    "testsRegistered": 10,
    "passPercent": 90,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6239abd7-98f2-45d2-a999-1d4fbd11407e",
      "title": "",
      "fullFile": "cypress\\e2e\\spec.cy.js",
      "file": "cypress\\e2e\\spec.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1fd88aa0-444e-4735-a670-20455785cab9",
          "title": "Testes automaticos da API ServeRest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cadastra um novo usuário",
              "fullTitle": "Testes automaticos da API ServeRest Cadastra um novo usuário",
              "timedOut": null,
              "duration": 439,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  nome: 'Nome do Usuário',\n  email: randomEmailCadastrar,\n  password: '12345',\n  administrador: 'true'\n};\ncy.request({\n  method: 'POST',\n  url: 'https://serverest.dev/usuarios',\n  body: user\n}).should(({\n  status,\n  body\n}) => {\n  expect(status).to.equal(201);\n  expect(body.message).to.include('Cadastro realizado com sucesso');\n  userId = body._id;\n});",
              "err": {},
              "uuid": "d0d5f50d-497c-4733-8fd3-4352aa5eab7c",
              "parentUUID": "1fd88aa0-444e-4735-a670-20455785cab9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cadastra usuário com e-mail igual ao primeiro",
              "fullTitle": "Testes automaticos da API ServeRest Cadastra usuário com e-mail igual ao primeiro",
              "timedOut": null,
              "duration": 193,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  nome: 'Nome do Usuário',\n  email: randomEmailCadastrar,\n  password: '12345',\n  administrador: 'true'\n};\ncy.request({\n  method: 'POST',\n  url: 'https://serverest.dev/usuarios',\n  body: user,\n  failOnStatusCode: false\n}).should(({\n  status,\n  body\n}) => {\n  expect(status).to.equal(400);\n  expect(body.message).to.include('Este email já está sendo usado');\n});",
              "err": {},
              "uuid": "d5b55c3b-6533-493c-94f9-2f6a26115d77",
              "parentUUID": "1fd88aa0-444e-4735-a670-20455785cab9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Atualizar usuário cadastrado",
              "fullTitle": "Testes automaticos da API ServeRest Atualizar usuário cadastrado",
              "timedOut": null,
              "duration": 187,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  nome: 'Nome do Usuário',\n  email: randomEmailAtualizar,\n  //email: 'edu222@gmail.com',\n  password: '12345',\n  administrador: 'true'\n};\ncy.request({\n  method: 'PUT',\n  url: `https://serverest.dev/usuarios/${userId}`,\n  body: user\n  //failOnStatusCode: false,\n}).should(({\n  status,\n  body\n}) => {\n  expect(status).to.equal(200);\n  expect(body.message).to.include('Registro alterado com sucesso');\n  //expect(body._id).to.be.not.undefined;\n});",
              "err": {},
              "uuid": "bc2ac0c3-37f3-4c05-847b-ceae06338f3f",
              "parentUUID": "1fd88aa0-444e-4735-a670-20455785cab9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Atualizar usuário cadastrado com erro",
              "fullTitle": "Testes automaticos da API ServeRest Atualizar usuário cadastrado com erro",
              "timedOut": null,
              "duration": 386,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const user = {\n  nome: 'Nome do Usuário',\n  email: randomEmailCadastrar,\n  password: '12345',\n  administrador: 'true'\n};\ncy.request({\n  method: 'PUT',\n  //url: `https://serverest.dev/usuarios/${userId}`,\n  url: `https://serverest.dev/usuarios/1`,\n  body: user,\n  failOnStatusCode: false\n}).should(({\n  status,\n  body\n}) => {\n  expect(status).to.equal(400);\n  expect(body.message).to.include('email deve ser um email válido');\n});",
              "err": {
                "message": "AssertionError: expected 201 to equal 400",
                "estack": "AssertionError: expected 201 to equal 400\n    at Context.eval (webpack://tcc-teste-cypress/./cypress/e2e/spec.cy.js:98:24)",
                "diff": "- 201\n+ 400\n"
              },
              "uuid": "3502fafa-ac1d-424d-b422-5ea7bb98f73d",
              "parentUUID": "1fd88aa0-444e-4735-a670-20455785cab9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Buscar usuário cadastrado por ID",
              "fullTitle": "Testes automaticos da API ServeRest Buscar usuário cadastrado por ID",
              "timedOut": null,
              "duration": 194,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `https://serverest.dev/usuarios/${userId}`\n}).should(({\n  status,\n  body\n}) => {\n  expect(status).to.equal(200);\n  expect(body.nome).to.equal('Nome do Usuário');\n  //expect(body.email).to.equal(randomEmailCadastrar); \n  expect(body.password).to.equal('12345');\n});",
              "err": {},
              "uuid": "27f0143e-52fa-490e-b3d0-374a9f2b9de1",
              "parentUUID": "1fd88aa0-444e-4735-a670-20455785cab9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Buscar usuário por email",
              "fullTitle": "Testes automaticos da API ServeRest Buscar usuário por email",
              "timedOut": null,
              "duration": 197,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const emailToSearch = randomEmailAtualizar;\ncy.request({\n  method: 'GET',\n  url: `https://serverest.dev/usuarios?email=${emailToSearch}`\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body).to.be.an('object');\n  expect(response.body).to.have.property('usuarios').that.is.an('array');\n  if (response.body.usuarios.length === 0) {\n    cy.log('Nenhum usuário encontrado com o email especificado.');\n  } else {\n    const firstUser = response.body.usuarios[0];\n    expect(firstUser).to.have.property('nome');\n    expect(firstUser).to.have.property('password');\n  }\n});",
              "err": {},
              "uuid": "9c190193-0aa1-4dd5-9cc1-8a365c32115a",
              "parentUUID": "1fd88aa0-444e-4735-a670-20455785cab9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Buscar usuário por email inválido",
              "fullTitle": "Testes automaticos da API ServeRest Buscar usuário por email inválido",
              "timedOut": null,
              "duration": 194,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const emailInvalido = 'email_inexistente@exemplo.com';\ncy.request({\n  method: 'GET',\n  url: `https://serverest.dev/usuarios?email=${emailInvalido}`\n}).should(({\n  status,\n  body\n}) => {\n  expect(status).to.equal(200);\n  expect(body).to.be.an('object');\n  expect(body.usuarios).to.be.an('array');\n  expect(body.usuarios).to.have.lengthOf(0);\n});",
              "err": {},
              "uuid": "ba44b924-775f-4095-aadc-b6333c9333ee",
              "parentUUID": "1fd88aa0-444e-4735-a670-20455785cab9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Buscar Administradores",
              "fullTitle": "Testes automaticos da API ServeRest Buscar Administradores",
              "timedOut": null,
              "duration": 188,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const is_administrador = true;\ncy.request({\n  method: 'GET',\n  url: `https://serverest.dev/usuarios?administrador=${is_administrador}`\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body).to.be.an('object');\n  expect(response.body).to.have.property('usuarios').that.is.an('array');\n  expect(response.body.usuarios.length).to.be.greaterThan(0);\n  if (response.body.usuarios.length === 0) {\n    cy.log('Nenhum Administrador encontrado.');\n  }\n});",
              "err": {},
              "uuid": "3beb2fd6-f064-47fa-9ca0-cabaed81e588",
              "parentUUID": "1fd88aa0-444e-4735-a670-20455785cab9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deletar usuário cadastrado por ID",
              "fullTitle": "Testes automaticos da API ServeRest Deletar usuário cadastrado por ID",
              "timedOut": null,
              "duration": 189,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'DELETE',\n  url: `https://serverest.dev/usuarios/${userId}`\n}).should(({\n  status,\n  body\n}) => {\n  expect(status).to.equal(200);\n  expect(body.message).to.contains('Registro excluído com sucesso');\n});",
              "err": {},
              "uuid": "064e78df-4723-479b-8fd0-3a015e6bf2b8",
              "parentUUID": "1fd88aa0-444e-4735-a670-20455785cab9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deletar mesmo usuário cadastrado por ID novamente",
              "fullTitle": "Testes automaticos da API ServeRest Deletar mesmo usuário cadastrado por ID novamente",
              "timedOut": null,
              "duration": 219,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'DELETE',\n  url: `https://serverest.dev/usuarios/${userId}`\n}).should(({\n  status,\n  body\n}) => {\n  expect(status).to.equal(200);\n  expect(body.message).to.contains('Nenhum registro excluído');\n});",
              "err": {},
              "uuid": "c31b256a-4219-4021-9564-969e8d0e427c",
              "parentUUID": "1fd88aa0-444e-4735-a670-20455785cab9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d0d5f50d-497c-4733-8fd3-4352aa5eab7c",
            "d5b55c3b-6533-493c-94f9-2f6a26115d77",
            "bc2ac0c3-37f3-4c05-847b-ceae06338f3f",
            "27f0143e-52fa-490e-b3d0-374a9f2b9de1",
            "9c190193-0aa1-4dd5-9cc1-8a365c32115a",
            "ba44b924-775f-4095-aadc-b6333c9333ee",
            "3beb2fd6-f064-47fa-9ca0-cabaed81e588",
            "064e78df-4723-479b-8fd0-3a015e6bf2b8",
            "c31b256a-4219-4021-9564-969e8d0e427c"
          ],
          "failures": [
            "3502fafa-ac1d-424d-b422-5ea7bb98f73d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2386,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/report",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}